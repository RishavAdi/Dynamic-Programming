//Recursive approach
class Solution {
public:
int solveUsingRecursion(int start,int end){
    if(start>=end)return 0;
    int ans=INT_MAX;
    for(int i=start;i<=end;i++){
        ans=min(ans,i+max(solveUsingRecursion(start,i-1),solveUsingRecursion(i+1,end)));
    }
    return ans;
}
    int getMoneyAmount(int n) {
        int ans=solveUsingRecursion(1,n);
        return ans;
    }
};

//Memoisation
class Solution {
public:
int solveUsingMem(int start,int end,vector<vector<int>>&dp){
    if(start>=end)return 0;
    if(dp[start][end]!=-1)return dp[start][end];
    int ans=INT_MAX;
    for(int i=start;i<=end;i++){
        ans=min(ans,i+max(solveUsingRecursion(start,i-1,dp),solveUsingRecursion(i+1,end,dp)));
    }
    return dp[start][end]=ans;
}
    int getMoneyAmount(int n) {
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        int ans=solveUsingRecursion(1,n,dp);
        return ans;
    }
};

//Tabulation
class Solution {
public:
int solveUsingTab(int n){
     vector<vector<int>>dp(n+2,vector<int>(n+2,0));
     int ans=INT_MAX;
     for(int start=n;start>=1;start--){
         for(int end=1;end<=n;end++){
             if(start>=end)continue;
             else{
                 int ans=INT_MAX;
    for(int i=start;i<=end;i++){
        ans=min(ans,i+max(dp[start][i-1],dp[i+1][end]));
    }
    dp[start][end]=ans;
             }
         }
     }
     return dp[1][n];
}

int getMoneyAmount(int n) {
        int ans=solveUsingTab(n);
        return ans;
    }
};
