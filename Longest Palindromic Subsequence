//Only Space optimisation is written.Everything is similar to question Longest Common Subsequence
class Solution {
public:int solveUsingSo(string text1,string text2){
   
   vector<int>curr(text2.length()+1,0);
   vector<int>next(text2.length()+1,0);
    for(int i=text1.length()-1;i>=0;i--){
        for(int j=text2.length()-1;j>=0;j--){
            int ans=0;
    if(text1[i]==text2[j]) 
    ans=1+next[j+1];
    else{
        ans=0+max(curr[j+1],next[j]);
    }
     curr[j]=ans;
        }
       //Remmeber to do shifting
        next=curr;
    }
   return next[0];
}
    int longestPalindromeSubseq(string s) {
        string first=s;
        reverse(s.begin(),s.end());string second =s;
        return solveUsingSo(first,second);
    }
};
