//Recursive way
class Solution {
public:
int solveUsingRec(vector<int>& nums,int curr,int prev){
    if(curr>=nums.size())
    return 0;
    //include
    int include=0;
    int exclude=0;
    if(prev==-1||nums[curr]>nums[prev])
     include=1+solveUsingRec(nums,curr+1,curr);
    //exclude
    
    exclude=0+solveUsingRec(nums,curr+1,prev);
    int ans=max(include,exclude);
    return ans;
}
    int lengthOfLIS(vector<int>& nums) {
        int curr=0;
        int prev=-1;
        return solveUsingRec(nums,curr,prev);
    }
};


//Memoisation
class Solution {
public:
int solveUsingMem(vector<int>& nums,int curr,int prev,vector<vector<int>>&dp){
    if(curr>=nums.size())
    return 0;
    //include
    int include=0;
   if(dp[curr][prev+1]!=-1)return dp[curr][prev+1];
    if(prev==-1||nums[curr]>nums[prev])
     include=1+solveUsingMem(nums,curr+1,curr,dp);
    //exclude
    
   int exclude=0+solveUsingMem(nums,curr+1,prev,dp);
    int ans=max(include,exclude);
    return dp[curr][prev+1]=ans;
}
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        int curr=0;
        int prev=-1;
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        return solveUsingMem(nums,curr,prev,dp);
    }
};

//Tabulation
class Solution {
public:
int solveUsingTab(vector<int>& nums){
    int n=nums.size();
    vector<vector<int>>dp(n+1,vector<int>(n+2,0));
    for(int i=n-1;i>=0;i--){
        for(int j=i-1;j>=-1;j--){
            int include=0;
    if(j==-1||nums[i]>nums[j])
     include=1+dp[i+1][i+1];
    //exclude
   int exclude=0+dp[i+1][j+1];
    int ans=max(include,exclude);
     dp[i][j+1]=ans;
        }
    }
    return dp[0][0];
}
    int lengthOfLIS(vector<int>& nums) {
        return solveUsingTab(nums);
    }
};

//Space optimization

