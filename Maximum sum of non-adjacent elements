//REcursive approach
#include <bits/stdc++.h> 
int f(vector<int> &nums,int ind){
    if(ind==0)return nums[ind];
    if(ind<0)return 0;
    int pick=f(nums,ind-2)+nums[ind];
    int nonpick=f(nums,ind-1)+0;
    return max(pick,nonpick);
}
int maximumNonAdjacentSum(vector<int> &nums){
    int index=nums.size()-1;
   int ans=f(nums,index);
   return ans;
}

//Memoisation
#include <bits/stdc++.h> 
int f(vector<int> &nums,int ind,vector<int>&dp){
    if(ind==0)return nums[ind];
    if(ind<0)return 0;
    if(dp[ind]!=-1)return dp[ind];
    int pick=f(nums,ind-2,dp)+nums[ind];
    int nonpick=f(nums,ind-1,dp)+0;
    return dp[ind]=max(pick,nonpick);
}
int maximumNonAdjacentSum(vector<int> &nums){
     int index=nums.size()-1;
     vector<int>dp(index+1,-1);
   int ans=f(nums,index,dp);
   return ans;
}

//Tabulation
int maximumNonAdjacentSum(vector<int> &nums){
    int ind=nums.size()-1;
    vector<int>dp(ind+1,0);
    dp[0]=nums[0];
    for(int i=1;i<=ind;i++){
        int pick=nums[i];
        if(i>1)
        pick+=dp[i-2];
        int nonpick=dp[i-1]+0;
         dp[i]=max(pick,nonpick);
    }
    return dp[ind];
}

//Space Optimization
int maximumNonAdjacentSum(vector<int>&nums){
    int prev=nums[0];
    int prev2=0;
    for(int i=0;i<nums.size();i++){
        int pick=nums[i];
        if(i>1) pick+=prev2;
        int nonpick=prev;
        int cur=max(pick,nonpick);
        prev2=prev;
        prev=cur;
    }
    return prev;
}

