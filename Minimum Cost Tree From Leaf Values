
//Recursive Approach
class Solution {
public:
int solveUsingRecursion(vector<int>& arr,map<pair<int,int>,int>&maxi,int left,int right){
    if(left==right)return 0;
    int ans=INT_MAX;
    for(int i=left;i<right;i++){
        ans=min(ans,maxi[{left,i}]*maxi[{i+1,right}]+solveUsingRecursion(arr,maxi,left,i)+solveUsingRecursion(arr,maxi,i+1,right));
    }
    return ans;
}
    int mctFromLeafValues(vector<int>& arr) {
        map<pair<int,int>,int>maxi;
        for(int i=0;i<arr.size();i++){
            maxi[{i,i}]=arr[i];
            for(int j=i+1;j<arr.size();j++){
                maxi[{i,j}]=max(arr[j],maxi[{i,j-1}]);

            }
        }
        int n=arr.size();
        int ans=solveUsingRecursion(arr,maxi,0,n-1);
        return ans;
    }
};


//Memoisation
class Solution {
public:
int solveUsingRecursion(vector<int>& arr,map<pair<int,int>,int>&maxi,int left,int right, vector<vector<int>>dp){
    if(left==right)return 0;
    int ans=INT_MAX;
    if(dp[left][right]!=-1)return dp[left][right];
    for(int i=left;i<right;i++){
        ans=min(ans,maxi[{left,i}]*maxi[{i+1,right}]+solveUsingRecursion(arr,maxi,left,i)+solveUsingRecursion(arr,maxi,i+1,right));
    }
    return dp[left][right]=ans;
}
    int mctFromLeafValues(vector<int>& arr) {
        int n=arr.size();
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        map<pair<int,int>,int>maxi;
        for(int i=0;i<arr.size();i++){
            maxi[{i,i}]=arr[i];
            for(int j=i+1;j<arr.size();j++){
                maxi[{i,j}]=max(arr[j],maxi[{i,j-1}]);

            }
        }
        int n=arr.size();
        int ans=solveUsingRecursion(arr,maxi,0,n-1,dp);
        return ans;
    }
};


//Tabulation 
class Solution {
public:
int solveUsingTab(vector<int>& arr,map<pair<int,int>,int>&maxi){
    int n=arr.size();
   vector<vector<int>>dp(n+1,vector<int>(n+1,0));
   for(int left=n-1;left>=0;left--){
       for(int right=0;right<n;right++){
           if(left>=right) continue;
           else{
               int ans=INT_MAX;
    for(int i=left;i<right;i++){
        ans=min(ans,maxi[{left,i}]*maxi[{i+1,right}]+dp[left][i]+dp[i+1][right]);
    }
    dp[left][right]=ans;
    
           }
       }
   }
   return dp[0][n-1];
}
    int mctFromLeafValues(vector<int>& arr) {
        int n=arr.size();
        map<pair<int,int>,int>maxi;
        for(int i=0;i<arr.size();i++){
            maxi[{i,i}]=arr[i];
            for(int j=i+1;j<arr.size();j++){
                maxi[{i,j}]=max(arr[j],maxi[{i,j-1}]);

            }
        }
        
        int ans=solveUsingTab(arr,maxi);
        return ans;
    }
};
