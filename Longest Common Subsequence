//Recursive way
class Solution {
public:
int solveUsingRec(string text1,string text2,int i,int j){
    if(i==text1.length()) return 0;
    if(j==text2.length()) return 0;
    int ans=0;
    if(text1[i]==text2[j]) 
    ans=1+solveUsingRec(text1,text2,i+1,j+1);
    else{
        ans=0+max(solveUsingRec(text1,text2,i+1,j),solveUsingRec(text1,text2,i,j+1));
    }
    return ans;
}
    int longestCommonSubsequence(string text1, string text2) {
        int i=0;
        int j=0;
       return  solveUsingRec(text1,text2,i,j);
    }
};


//Memoisation
class Solution {
public:
//Take care to pass text1 and text2 by reference
int solveUsingMem(string &text1,string &text2,int i,int j,vector<vector<int>>&dp){
    if(i==text1.length()) return 0;
    if(j==text2.length()) return 0;
    int ans=0;
    if(dp[i][j]!=-1) return dp[i][j];
    if(text1[i]==text2[j]) 
    ans=1+solveUsingMem(text1,text2,i+1,j+1,dp);
    else{
        ans=0+max(solveUsingMem(text1,text2,i+1,j,dp),solveUsingMem(text1,text2,i,j+1,dp));
    }
    return dp[i][j]=ans;
}
    int longestCommonSubsequence(string text1, string text2) {
         vector<vector<int>>dp(text1.length()+1,vector<int>(text2.length()+1,-1));
        int i=0;
        int j=0;
       return  solveUsingMem(text1,text2,i,j,dp);
    }
};

//Tabulation
class Solution {
public:
int solveUsingTab(string text1,string text2){
    vector<vector<int>>dp(text1.length()+1,vector<int>(text2.length()+1,0));
    for(int i=text1.length()-1;i>=0;i--){
        for(int j=text2.length()-1;j>=0;j--){
            int ans=0;
    if(text1[i]==text2[j]) 
    ans=1+dp[i+1][j+1];
    else{
        ans=0+max(dp[i+1][j],dp[i][j+1]);
    }
     dp[i][j]=ans;
        }
    }
    return dp[0][0];
}
    int longestCommonSubsequence(string text1, string text2) {
         
       return  solveUsingTab(text1,text2);
    }
};

//Space Optimization
class Solution {
public:
int solveUsingSo(string text1,string text2){
   
   vector<int>curr(text2.length()+1,0);
   vector<int>next(text2.length()+1,0);
    for(int i=text1.length()-1;i>=0;i--){
        for(int j=text2.length()-1;j>=0;j--){
            int ans=0;
    if(text1[i]==text2[j]) 
    ans=1+next[j+1];
    else{
        ans=0+max(curr[j+1],next[j]);
    }
     curr[j]=ans;
        }
       //Remmeber to do shifting
        next=curr;
    }
   return next[0];
}
    int longestCommonSubsequence(string text1, string text2) {
         
       return  solveUsingSo(text1,text2);
    }
};
